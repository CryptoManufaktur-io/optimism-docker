x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  op-geth:
    restart: "unless-stopped"
    build:
      context: ./op-geth
      dockerfile: Dockerfile.binary
      args:
        - DOCKER_TAG=${OPGETH_DOCKER_TAG}
    image: op-geth:${NETWORK}
    pull_policy: build
    stop_grace_period: 5m
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SNAPSHOT=${SNAPSHOT:-}
      - NETWORK=${NETWORK:-}
      - LEGACY=${LEGACY:-false}
      - EL_EXTRAS=${EL_EXTRAS:-}
    volumes:
      - opgeth-data:/var/lib/op-geth
      - jwtsecret:/var/lib/op-geth/ee-secret
      - /etc/localtime:/etc/localtime:ro
    networks:
      default:
        aliases:
          - ${NETWORK}-geth # This allows multiple Optimism Docker stacks all connected to the same central traefik
    <<: *logging
    entrypoint:
      - docker-entrypoint.sh
      - geth
      - --op-network
      - ${NETWORK}
      - --datadir
      - /var/lib/op-geth
      - --rollup.sequencerhttp
      - ${SEQUENCER}
      - --rollup.disabletxpoolgossip
      - --authrpc.addr
      - 0.0.0.0
      - --authrpc.port
      - "8551"
      - --authrpc.jwtsecret
      - /var/lib/op-geth/ee-secret/jwtsecret
      - --authrpc.vhosts=*
      - --http
      - --http.addr
      - 0.0.0.0
      - --http.port
      - ${RPC_PORT:-8545} 
      - --http.vhosts=*
      - --http.corsdomain=*
      - --ws
      - --ws.addr
      - 0.0.0.0
      - --ws.port
      - ${WS_PORT:-8546}
      - --ws.origins=*
      - --metrics
      - --metrics.expensive
      - --pprof
      - --pprof.addr
      - 0.0.0.0
      - --syncmode
      - full
      - --maxpeers
      - "0"
      - --nodiscover
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST:-op}.service=${RPC_HOST:-op}
      - traefik.http.routers.${RPC_HOST:-op}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-op}.rule=Host(`${RPC_HOST:-op}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-op}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST:-op}lb.service=${RPC_HOST:-op}
      - traefik.http.routers.${RPC_HOST:-op}lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-op}lb.rule=Host(`${RPC_LB:-op-lb}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-op}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-op}.loadbalancer.server.port=${RPC_PORT:-8545}
      - traefik.http.routers.${WS_HOST:-opws}.service=${WS_HOST:-opws}
      - traefik.http.routers.${WS_HOST:-opws}.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-opws}.rule=Host(`${WS_HOST:-opws}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-opws}.tls.certresolver=letsencrypt
      - traefik.http.routers.${WS_HOST:-opws}lb.service=${WS_HOST:-opws}
      - traefik.http.routers.${WS_HOST:-opws}lb.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-opws}lb.rule=Host(`${WS_LB:-opws-lb}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-opws}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${WS_HOST:-opws}.loadbalancer.server.port=${WS_PORT:-8546}
      - metrics.scrape=true
      - metrics.path=/debug/metrics/prometheus
      - metrics.port=6060

  op-node:
    restart: "unless-stopped"
    build:
      context: ./op-node
      dockerfile: Dockerfile.binary
      args:
        - DOCKER_TAG=${OPNODE_DOCKER_TAG}
    image: op-node:${NETWORK}
    pull_policy: build
    stop_grace_period: 1m
    stop_signal: SIGHUP
    environment:
      - CL_EXTRAS=${CL_EXTRAS}
    volumes:
      - jwtsecret:/var/lib/op-node/ee-secret
      - opnode-data:/var/lib/op-node
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${OPNODE_P2P_PORT:-9222}:${OPNODE_P2P_PORT:-9222}/tcp
      - ${OPNODE_P2P_PORT:-9222}:${OPNODE_P2P_PORT:-9222}/udp
    <<: *logging
    entrypoint:
      - docker-entrypoint.sh
      - op-node
      - --log.level
      - ${LOG_LEVEL}
      - --l2
      - ${L2_CONNECTION_KIND:-http}://${NETWORK}-geth:8551
      - --l2.jwt-secret
      - /var/lib/op-node/ee-secret/jwtsecret
      - --network
      - ${NETWORK}
      - --l1
      - ${L1_RPC}
      - --l1.rpckind
      - ${L1_RPC_KIND:-basic}
      - --rpc.addr
      - 0.0.0.0
      - --rpc.port
      - ${OPNODE_RPC_PORT:-9545}
      - --metrics.enabled
      - --p2p.listen.tcp
      - ${OPNODE_P2P_PORT:-9222}
      - --p2p.discovery.path
      - /var/lib/op-node/opnode_discovery_db
      - --p2p.peerstore.path
      - /var/lib/op-node/opnode_peerstore_db
      - --p2p.priv.path
      - /var/lib/op-node/opnode_p2p_priv.txt
    labels:
      - traefik.enable=true
      - traefik.http.routers.${OPNODE_HOST:-opnode}.service=${OPNODE_HOST:-opnode}
      - traefik.http.routers.${OPNODE_HOST:-opnode}.entrypoints=websecure
      - traefik.http.routers.${OPNODE_HOST:-opnode}.rule=Host(`${OPNODE_HOST:-opnode}.${DOMAIN}`)
      - traefik.http.routers.${OPNODE_HOST:-opnode}.tls.certresolver=letsencrypt
      - traefik.http.routers.${OPNODE_HOST:-opnode}lb.service=${OPNODE_HOST:-opnode}
      - traefik.http.routers.${OPNODE_HOST:-opnode}lb.entrypoints=websecure
      - traefik.http.routers.${OPNODE_HOST:-opnode}lb.rule=Host(`${OPNODE_LB:-opnode-lb}.${DOMAIN}`)
      - traefik.http.routers.${OPNODE_HOST:-opnode}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${OPNODE_HOST:-opnode}.loadbalancer.server.port=${OPNODE_RPC_PORT:-9545}
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=7300

  set-prune-marker:
    profiles: ["tools"]
    image: alpine:3
    restart: "no"
    volumes:
      - opgeth-data:/var/lib/op-geth
    entrypoint: ["/bin/sh","-c"]
    command: /bin/sh

volumes:
  opgeth-data:
  opnode-data:
  jwtsecret:
